{"version":3,"file":"index.js","sources":["../src/utils/options.ts","../src/utils/format.ts","../src/index.ts","../src/utils/index.ts","../src/utils/sanitize.ts"],"sourcesContent":["import { ReadEnvOptions, SanitizeOptions } from '../typings';\n\nconst defaultOptions: ReadEnvOptions = {\n  format: 'camelcase',\n  separator: '__',\n  sanitize: {\n    object: true,\n    array: true,\n    bool: true,\n    int: true,\n    float: true,\n  },\n  includePrefix: false,\n};\n\nconst getOptions = (userOptions: Partial<ReadEnvOptions>): ReadEnvOptions => {\n  if (typeof userOptions.sanitize === 'object') {\n    // eslint-disable-next-line no-param-reassign\n    userOptions.sanitize = {\n      ...(defaultOptions.sanitize as SanitizeOptions),\n      ...userOptions.sanitize,\n    };\n  }\n  return { ...defaultOptions, ...userOptions };\n};\n\nexport { defaultOptions, getOptions };\n","import camelcase from 'camelcase';\nimport { FormatFunction } from '../typings';\n\nconst formatters: Record<string, FormatFunction> = {\n  camelcase: (str: string): string => camelcase(str.toLowerCase()),\n  pascalcase: (str: string): string =>\n    camelcase(str.toLowerCase(), { pascalCase: true }),\n  lowercase: (str: string): string => str.toLowerCase(),\n  uppercase: (str: string): string => str.toUpperCase(),\n};\n\nconst formatKey = (\n  key: string,\n  format: boolean | string | FormatFunction,\n): string => {\n  if (typeof format === 'string') {\n    return formatters[format](key);\n  }\n\n  if (typeof format === 'function') {\n    return format(key);\n  }\n\n  return key;\n};\n\nexport { formatKey };\n","import { ReadEnvOptions, ReadEnvResult } from './typings';\nimport { getOptions, sanitize, formatKey, trimLeft } from './utils';\n\nconst readEnv = (\n  prefix?: string,\n  options: Partial<ReadEnvOptions> = {},\n): ReadEnvResult => {\n  // Options\n  const {\n    format,\n    source = process.env,\n    includePrefix,\n    sanitize: sanitizeOptions,\n    separator,\n  } = getOptions(options);\n\n  let keys = Object.keys(source);\n\n  // Filter keys by prefix\n  if (typeof prefix === 'string' && prefix) {\n    keys = keys.filter((value) => value.indexOf(prefix) === 0);\n  }\n\n  // Process keys\n  return keys.reduce((result, key) => {\n    let envValue = source[key]?.trim();\n    let envKey = key;\n\n    // Sanitize\n    if (typeof sanitizeOptions === 'object' && envValue) {\n      envValue = sanitize(envValue, sanitizeOptions);\n    }\n\n    // Remove Prefix\n    if (!includePrefix && typeof prefix === 'string' && prefix) {\n      envKey = envKey.replace(prefix, '');\n    }\n\n    // Trim left underscore\n    envKey = trimLeft(envKey, '_');\n\n    let deepKeys = [envKey];\n    // Process deep object\n    if (typeof separator === 'string' && separator) {\n      deepKeys = envKey.split(separator);\n    }\n\n    deepKeys.reduce((acc, item, index) => {\n      const deepKey = formatKey(item, format);\n      if (index === deepKeys.length - 1) {\n        acc[deepKey] = envValue;\n      } else if (\n        typeof acc[deepKey] !== 'object' ||\n        Array.isArray(acc[deepKey])\n      ) {\n        acc[deepKey] = {};\n      }\n      return acc[deepKey];\n    }, result);\n\n    // and DONE!\n    return result;\n  }, {} as ReadEnvResult);\n};\n\nexport { readEnv };\n","export * from './options';\nexport * from './format';\nexport * from './sanitize';\n\nconst trimLeft = (str: string, charList: string): string =>\n  str.replace(new RegExp(`^[${charList}]+`), '');\n\nexport { trimLeft };\n","import { SanitizeOptions } from '../typings';\n\nconst isObject = (value: string): boolean =>\n  value[0] === '{' && value[value.length - 1] === '}';\n\nconst isArray = (value: string): boolean =>\n  value[0] === '[' && value[value.length - 1] === ']';\n\nconst isInt = (value: string): boolean => /^-?\\d+$/.test(value);\n\nconst isFloat = (value: string): boolean => /^-?\\d*(\\.\\d+)$/.test(value);\nconst isBool = (value: string): boolean => {\n  const boolValue = value.toLowerCase();\n  return boolValue === 'true' || boolValue === 'false';\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst sanitize = (value: string, options: SanitizeOptions): any => {\n  // Sanitize Object\n  if (options.object && isObject(value)) {\n    try {\n      return JSON.parse(value);\n    } catch (err) {\n      return value;\n    }\n  }\n\n  // Sanitize Array\n  if (options.array && isArray(value)) {\n    try {\n      return JSON.parse(value);\n    } catch (err) {\n      return value;\n    }\n  }\n\n  // Sanitize Integer\n  if (options.int && isInt(value)) {\n    return parseInt(value, 10);\n  }\n\n  // Sanitize Float\n  if (options.float && isFloat(value)) {\n    return parseFloat(value);\n  }\n\n  // Sanitize Boolean\n  if (options.bool && isBool(value)) {\n    return value.toLowerCase() === 'true';\n  }\n\n  // Return raw value\n  return value;\n};\n\nexport { sanitize };\n"],"names":["defaultOptions","format","separator","sanitize","object","array","bool","int","float","includePrefix","formatters","camelcase","str","toLowerCase","pascalcase","pascalCase","lowercase","uppercase","toUpperCase","prefix","options","userOptions","_a","_b","source","sanitizeOptions","keys","Object","filter","value","indexOf","reduce","result","key","charList","envValue","trim","envKey","length","isObject","JSON","parse","err","isArray","test","isInt","parseInt","isFloat","parseFloat","boolValue","isBool","replace","deepKeys","RegExp","split","acc","item","index","deepKey","formatKey","Array"],"mappings":"mWAEMA,EAAiC,CACrCC,OAAQ,YACRC,UAAW,KACXC,SAAU,CACRC,QAAQ,EACRC,OAAO,EACPC,MAAM,EACNC,KAAK,EACLC,OAAO,GAETC,eAAe,GCTXC,EAA6C,CACjDC,UAAW,SAACC,GAAwB,OAAAD,EAAUC,EAAIC,gBAClDC,WAAY,SAACF,GACX,OAAAD,EAAUC,EAAIC,cAAe,CAAEE,YAAY,KAC7CC,UAAW,SAACJ,GAAwB,OAAAA,EAAIC,eACxCI,UAAW,SAACL,GAAwB,OAAAA,EAAIM,gCCL1B,SACdC,EACAC,gBAAAA,MAGM,IFOYC,EEPZC,GFQ8B,iBADlBD,KACKlB,WAErBkB,EAAYlB,gBACNH,EAAeG,UAChBkB,EAAYlB,kBAGPH,GAAmBqB,IEd7BpB,WACAsB,WAAAC,2BACAf,kBACAgB,aACAvB,cAGEwB,EAAOC,OAAOD,KAAKF,GAQvB,MALsB,iBAAXL,GAAuBA,IAChCO,EAAOA,EAAKE,QAAO,SAACC,GAAU,OAA0B,IAA1BA,EAAMC,QAAQX,OAIvCO,EAAKK,QAAO,SAACC,EAAQC,SCpBCC,EDqBvBC,YAAWX,EAAOS,yBAAMG,OACxBC,EAASJ,EAGkB,iBAApBR,GAAgCU,IACzCA,EEbW,SAACN,EAAeT,GAE/B,GAAIA,EAAQhB,QAjBG,SAACyB,GAChB,MAAa,MAAbA,EAAM,IAA0C,MAA5BA,EAAMA,EAAMS,OAAS,GAgBnBC,CAASV,GAC7B,IACE,OAAOW,KAAKC,MAAMZ,GAClB,MAAOa,GACP,OAAOb,EAKX,GAAIT,EAAQf,OAvBE,SAACwB,GACf,MAAa,MAAbA,EAAM,IAA0C,MAA5BA,EAAMA,EAAMS,OAAS,GAsBpBK,CAAQd,GAC3B,IACE,OAAOW,KAAKC,MAAMZ,GAClB,MAAOa,GACP,OAAOb,EAKX,OAAIT,EAAQb,KA7BA,SAACsB,GAA2B,MAAA,UAAUe,KAAKf,GA6BpCgB,CAAMhB,GAChBiB,SAASjB,EAAO,IAIrBT,EAAQZ,OAhCE,SAACqB,GAA2B,MAAA,iBAAiBe,KAAKf,GAgC3CkB,CAAQlB,GACpBmB,WAAWnB,GAIhBT,EAAQd,MApCC,SAACuB,GACd,IAAMoB,EAAYpB,EAAMhB,cACxB,MAAqB,SAAdoC,GAAsC,UAAdA,EAkCXC,CAAOrB,GACM,SAAxBA,EAAMhB,cAIRgB,EFtBQ1B,CAASgC,EAAUV,KAI3BhB,GAAmC,iBAAXU,GAAuBA,IAClDkB,EAASA,EAAOc,QAAQhC,EAAQ,KC/BPe,EDmCD,IAE1B,IAAIkB,EAAW,CAFff,EAAkBA,EClChBc,QAAQ,IAAIE,OAAO,KAAKnB,QAAe,KDwDzC,MAlByB,iBAAdhC,GAA0BA,IACnCkD,EAAWf,EAAOiB,MAAMpD,IAG1BkD,EAASrB,QAAO,SAACwB,EAAKC,EAAMC,GAC1B,IAAMC,EDrCM,SAChBzB,EACAhC,GAEA,MAAsB,iBAAXA,EACFS,EAAWT,GAAQgC,GAGN,mBAAXhC,EACFA,EAAOgC,GAGTA,ECyBa0B,CAAUH,EAAMvD,GAShC,OARIwD,IAAUL,EAASd,OAAS,EAC9BiB,EAAIG,GAAWvB,GAES,iBAAjBoB,EAAIG,IACXE,MAAMjB,QAAQY,EAAIG,OAElBH,EAAIG,GAAW,IAEVH,EAAIG,KACV1B,GAGIA,IACN"}