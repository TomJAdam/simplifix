{"version":3,"file":"index.umd.js","sources":["../src/utils/options.ts","../node_modules/camelcase/index.js","../src/utils/format.ts","../src/index.ts","../src/utils/index.ts","../src/utils/sanitize.ts"],"sourcesContent":["import { ReadEnvOptions, SanitizeOptions } from '../typings';\n\nconst defaultOptions: ReadEnvOptions = {\n  format: 'camelcase',\n  separator: '__',\n  sanitize: {\n    object: true,\n    array: true,\n    bool: true,\n    int: true,\n    float: true,\n  },\n  includePrefix: false,\n};\n\nconst getOptions = (userOptions: Partial<ReadEnvOptions>): ReadEnvOptions => {\n  if (typeof userOptions.sanitize === 'object') {\n    // eslint-disable-next-line no-param-reassign\n    userOptions.sanitize = {\n      ...(defaultOptions.sanitize as SanitizeOptions),\n      ...userOptions.sanitize,\n    };\n  }\n  return { ...defaultOptions, ...userOptions };\n};\n\nexport { defaultOptions, getOptions };\n","'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import camelcase from 'camelcase';\nimport { FormatFunction } from '../typings';\n\nconst formatters: Record<string, FormatFunction> = {\n  camelcase: (str: string): string => camelcase(str.toLowerCase()),\n  pascalcase: (str: string): string =>\n    camelcase(str.toLowerCase(), { pascalCase: true }),\n  lowercase: (str: string): string => str.toLowerCase(),\n  uppercase: (str: string): string => str.toUpperCase(),\n};\n\nconst formatKey = (\n  key: string,\n  format: boolean | string | FormatFunction,\n): string => {\n  if (typeof format === 'string') {\n    return formatters[format](key);\n  }\n\n  if (typeof format === 'function') {\n    return format(key);\n  }\n\n  return key;\n};\n\nexport { formatKey };\n","import { ReadEnvOptions, ReadEnvResult } from './typings';\nimport { getOptions, sanitize, formatKey, trimLeft } from './utils';\n\nconst readEnv = (\n  prefix?: string,\n  options: Partial<ReadEnvOptions> = {},\n): ReadEnvResult => {\n  // Options\n  const {\n    format,\n    source = process.env,\n    includePrefix,\n    sanitize: sanitizeOptions,\n    separator,\n  } = getOptions(options);\n\n  let keys = Object.keys(source);\n\n  // Filter keys by prefix\n  if (typeof prefix === 'string' && prefix) {\n    keys = keys.filter((value) => value.indexOf(prefix) === 0);\n  }\n\n  // Process keys\n  return keys.reduce((result, key) => {\n    let envValue = source[key]?.trim();\n    let envKey = key;\n\n    // Sanitize\n    if (typeof sanitizeOptions === 'object' && envValue) {\n      envValue = sanitize(envValue, sanitizeOptions);\n    }\n\n    // Remove Prefix\n    if (!includePrefix && typeof prefix === 'string' && prefix) {\n      envKey = envKey.replace(prefix, '');\n    }\n\n    // Trim left underscore\n    envKey = trimLeft(envKey, '_');\n\n    let deepKeys = [envKey];\n    // Process deep object\n    if (typeof separator === 'string' && separator) {\n      deepKeys = envKey.split(separator);\n    }\n\n    deepKeys.reduce((acc, item, index) => {\n      const deepKey = formatKey(item, format);\n      if (index === deepKeys.length - 1) {\n        acc[deepKey] = envValue;\n      } else if (\n        typeof acc[deepKey] !== 'object' ||\n        Array.isArray(acc[deepKey])\n      ) {\n        acc[deepKey] = {};\n      }\n      return acc[deepKey];\n    }, result);\n\n    // and DONE!\n    return result;\n  }, {} as ReadEnvResult);\n};\n\nexport { readEnv };\n","export * from './options';\nexport * from './format';\nexport * from './sanitize';\n\nconst trimLeft = (str: string, charList: string): string =>\n  str.replace(new RegExp(`^[${charList}]+`), '');\n\nexport { trimLeft };\n","import { SanitizeOptions } from '../typings';\n\nconst isObject = (value: string): boolean =>\n  value[0] === '{' && value[value.length - 1] === '}';\n\nconst isArray = (value: string): boolean =>\n  value[0] === '[' && value[value.length - 1] === ']';\n\nconst isInt = (value: string): boolean => /^-?\\d+$/.test(value);\n\nconst isFloat = (value: string): boolean => /^-?\\d*(\\.\\d+)$/.test(value);\nconst isBool = (value: string): boolean => {\n  const boolValue = value.toLowerCase();\n  return boolValue === 'true' || boolValue === 'false';\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst sanitize = (value: string, options: SanitizeOptions): any => {\n  // Sanitize Object\n  if (options.object && isObject(value)) {\n    try {\n      return JSON.parse(value);\n    } catch (err) {\n      return value;\n    }\n  }\n\n  // Sanitize Array\n  if (options.array && isArray(value)) {\n    try {\n      return JSON.parse(value);\n    } catch (err) {\n      return value;\n    }\n  }\n\n  // Sanitize Integer\n  if (options.int && isInt(value)) {\n    return parseInt(value, 10);\n  }\n\n  // Sanitize Float\n  if (options.float && isFloat(value)) {\n    return parseFloat(value);\n  }\n\n  // Sanitize Boolean\n  if (options.bool && isBool(value)) {\n    return value.toLowerCase() === 'true';\n  }\n\n  // Return raw value\n  return value;\n};\n\nexport { sanitize };\n"],"names":["defaultOptions","format","separator","sanitize","object","array","bool","int","float","includePrefix","camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","map","x","trim","filter","length","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","formatters","camelcase","str","pascalcase","lowercase","uppercase","prefix","userOptions","_a","_b","source","sanitizeOptions","keys","value","indexOf","reduce","result","key","charList","envValue","envKey","isObject","JSON","parse","err","isInt","parseInt","isFloat","parseFloat","boolValue","isBool","deepKeys","RegExp","split","acc","item","index","deepKey","formatKey"],"mappings":"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"}